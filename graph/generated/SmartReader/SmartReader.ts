// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AnnotationAdded extends ethereum.Event {
  get params(): AnnotationAdded__Params {
    return new AnnotationAdded__Params(this);
  }
}

export class AnnotationAdded__Params {
  _event: AnnotationAdded;

  constructor(event: AnnotationAdded) {
    this._event = event;
  }

  get mainContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subContractName(): string {
    return this._event.parameters[1].value.toString();
  }

  get annotation(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ContractAdded extends ethereum.Event {
  get params(): ContractAdded__Params {
    return new ContractAdded__Params(this);
  }
}

export class ContractAdded__Params {
  _event: ContractAdded;

  constructor(event: ContractAdded) {
    this._event = event;
  }

  get mainContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subContractName(): string {
    return this._event.parameters[1].value.toString();
  }

  get explanation(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class SmartReader extends ethereum.SmartContract {
  static bind(address: Address): SmartReader {
    return new SmartReader("SmartReader", address);
  }

  contractStorage(param0: Address, param1: string): string {
    let result = super.call(
      "contractStorage",
      "contractStorage(address,string):(string)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromString(param1)]
    );

    return result[0].toString();
  }

  try_contractStorage(
    param0: Address,
    param1: string
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "contractStorage",
      "contractStorage(address,string):(string)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromString(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAnnotationCall extends ethereum.Call {
  get inputs(): AddAnnotationCall__Inputs {
    return new AddAnnotationCall__Inputs(this);
  }

  get outputs(): AddAnnotationCall__Outputs {
    return new AddAnnotationCall__Outputs(this);
  }
}

export class AddAnnotationCall__Inputs {
  _call: AddAnnotationCall;

  constructor(call: AddAnnotationCall) {
    this._call = call;
  }

  get mainContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subContractName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get annotation(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddAnnotationCall__Outputs {
  _call: AddAnnotationCall;

  constructor(call: AddAnnotationCall) {
    this._call = call;
  }
}

export class AddContractCall extends ethereum.Call {
  get inputs(): AddContractCall__Inputs {
    return new AddContractCall__Inputs(this);
  }

  get outputs(): AddContractCall__Outputs {
    return new AddContractCall__Outputs(this);
  }
}

export class AddContractCall__Inputs {
  _call: AddContractCall;

  constructor(call: AddContractCall) {
    this._call = call;
  }

  get mainContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subContractName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get explanation(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddContractCall__Outputs {
  _call: AddContractCall;

  constructor(call: AddContractCall) {
    this._call = call;
  }
}
